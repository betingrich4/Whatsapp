import moment from 'moment-timezone';
import fs from 'fs';
import os from 'os';
import pkg, { prepareWAMessageMedia } from '@whiskeysockets/baileys';
const { generateWAMessageFromContent, proto } = pkg;
import config from '../../config.cjs';

// Get total memory and free memory in bytes
const totalMemoryBytes = os.totalmem();
const freeMemoryBytes = os.freemem();

// Define unit conversions
const byteToKB = 1 / 1024;
const byteToMB = byteToKB / 1024;
const byteToGB = byteToMB / 1024;

// Function to format bytes to a human-readable format
function formatBytes(bytes) {
  if (bytes >= Math.pow(1024, 3)) {
    return (bytes * byteToGB).toFixed(2) + ' GB';
  } else if (bytes >= Math.pow(1024, 2)) {
    return (bytes * byteToMB).toFixed(2) + ' MB';
  } else if (bytes >= 1024) {
    return (bytes * byteToKB).toFixed(2) + ' KB';
  } else {
    return bytes.toFixed(2) + ' bytes';
  }
}
// Bot Process Time
const uptime = process.uptime();
const day = Math.floor(uptime / (24 * 3600)); // Calculate days
const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
const seconds = Math.floor(uptime % 60); // Calculate seconds

// Uptime
const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
const runMessage = `*‚òÄÔ∏è ${day} Day*\n*üïê ${hours} Hour*\n*‚è∞ ${minutes} Minutes*\n*‚è±Ô∏è ${seconds} Seconds*\n`;

const xtime = moment.tz("Asia/Colombo").format("HH:mm:ss");
const xdate = moment.tz("Asia/Colombo").format("DD/MM/YYYY");
const time2 = moment().tz("Asia/Colombo").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

const test = async (m, Matrix) => {
  let selectedListId;
  const selectedButtonId = m?.message?.templateButtonReplyMessage?.selectedId;
  const interactiveResponseMessage = m?.message?.interactiveResponseMessage;
  if (interactiveResponseMessage) {
    const paramsJson = interactiveResponseMessage.nativeFlowResponseMessage?.paramsJson;
    if (paramsJson) {
      const params = JSON.parse(paramsJson);
      selectedListId = params.id;
     // console.log(selectedListId);
    }
  }
  const selectedId = selectedListId || selectedButtonId;
  
  const prefix = config.PREFIX;
const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
       
       const mode = config.MODE === 'public' ? 'public' : 'private';
       const pref = config.PREFIX;
           
        const validCommands = ['al', 'hel', 'meno'];

  if (validCommands.includes(cmd)) {
    let msg = generateWAMessageFromContent(m.from, {
      viewOnceMessage: {
        message: {
          "messageContextInfo": {
            "deviceListMetadata": {},
            "deviceListMetadataVersion": 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.create({
            body: proto.Message.InteractiveMessage.Body.create({
              text: `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îà‚ä∑
‚îÇ ô·¥è·¥õ …¥·¥Ä·¥ç·¥á: *Demon Slayer*
‚îÇ·¥†·¥á ÄÍú±…™·¥è…¥: 2.1.0
‚îÇ·¥è·¥°…¥·¥á Ä : *Crew-Slayer*      
‚îÇ…¥·¥ú·¥ç ô·¥á Ä: 218942841878
‚îÇ·¥ò ü·¥Ä·¥õ“ì·¥è Ä·¥ç: *${os.platform()}*
‚îÇ·¥ç·¥è·¥Ö·¥á: *${mode}*
‚îÇ·¥ò Ä·¥á“ì…™x: [${pref}]
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚îà‚ä∑ `
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: "Made By Crew Slayer"
            }),
            header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./src/ethix.jpg')}, { upload: Matrix.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: "",
                  hasMediaAttachment: false  
                }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
              buttons: [
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä·¥õ·¥õ·¥ò", id: ".attp" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä·¥õ·¥õ·¥ò2", id: ".attp2" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä·¥õ·¥õ·¥ò3", id: ".attp3" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥á ô…™…¥·¥Ä Ä è", id: ".ebinary" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ö ô…™…¥·¥Ä Ä è", id: ".dbinary" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥á·¥ç·¥è·¥ä…™·¥ç…™x", id: ".emojimix" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥ç·¥ò3", id: ".mp3" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä…™", id: ".ai" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " ô·¥ú…¢", id: ".bug" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢·¥ò·¥õ", id: ".gpt" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ö·¥Ä ü ü·¥á", id: ".dalle" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " Ä·¥á·¥ç…™…¥…™", id: ".remini" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢·¥á·¥ç…™…¥…™", id: ".gemini" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ñ·¥Ä ü·¥Ñ·¥ú ü·¥Ä·¥õ·¥è Ä", id: ".calculator" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥õ·¥á·¥ç·¥ò·¥ç·¥Ä…™ ü", id: ".tempmail" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ñ ú·¥á·¥Ñ·¥ã·¥ç·¥Ä…™ ü", id: ".checkmail" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á", id: ".trt" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥õ·¥õs", id: ".tts" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " ü…™…¥·¥ã…¢ Ä·¥è·¥ú·¥ò", id: ".linkgroup" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "s·¥á·¥õ·¥ò·¥ò…¢·¥Ñ", id: ".setppgc" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "s·¥á·¥õ…¥·¥Ä·¥ç·¥á", id: ".setname" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "s·¥á·¥õ·¥Ö·¥ás·¥Ñ", id: ".setdesc" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢ Ä·¥è·¥ú·¥ò", id: ".group" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢·¥Ñs·¥á·¥õ·¥õ…™…¥…¢", id: ".gcsetting" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á", id: ".welcome" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä·¥Ö·¥Ö", id: ".add" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥ã…™·¥Ñ·¥ã", id: ".kick" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " ú…™·¥Ö·¥á·¥õ·¥Ä…¢", id: ".hidetag" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥õ·¥Ä…¢·¥Ä ü ü", id: ".tagall" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä…¥·¥õ…™ ü…™…¥·¥ã", id: ".antilink" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä…¥·¥õ…™·¥õ·¥èx…™·¥Ñ", id: ".antitoxic" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á", id: ".promote" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ö·¥á·¥ç·¥è·¥õ·¥á", id: ".demote" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢·¥á·¥õ ô…™·¥è", id: ".getbio" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥Ä·¥ò·¥ã", id: ".apk" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "“ì·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã", id: ".facebook" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥ç·¥á·¥Ö…™·¥Ä“ì…™ Ä·¥á", id: ".mediafire" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥ò…™…¥·¥õ·¥á Ä·¥ás·¥õ·¥Ö ü", id: ".pinterestdl" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢…™·¥õ·¥Ñ ü·¥è…¥·¥á", id: ".gitclone" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢·¥Ö Ä…™·¥†·¥á", id: ".gdrive" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…™…¥s·¥õ·¥Ä", id: ".insta" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " è·¥õ·¥ç·¥ò3", id: ".ytmp3" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " è·¥õ·¥ç·¥ò4", id: ".ytmp4" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥ò ü·¥Ä è", id: ".play" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "s·¥è…¥…¢", id: ".song" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥†…™·¥Ö·¥á·¥è", id: ".video" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " è·¥õ·¥ç·¥ò3·¥Ö·¥è·¥Ñ", id: ".ytmp3doc" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " è·¥õ·¥ç·¥ò4·¥Ö·¥è·¥Ñ", id: ".ytmp4doc" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥õ…™·¥ã·¥õ·¥è·¥ã", id: ".tiktok" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " è·¥õs", id: ".yts" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…™·¥ç·¥Ö ô", id: ".imdb" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢·¥è·¥è…¢ ü·¥á", id: ".google" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "…¢…™·¥ç·¥Ä…¢·¥á", id: ".gimage" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥ò…™…¥·¥õ·¥á Ä·¥ás·¥õ", id: ".pinterest" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥°·¥Ä ü ü·¥ò·¥Ä·¥ò·¥á Ä", id: ".wallpaper" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: "·¥°…™·¥ã…™·¥ç·¥á·¥Ö…™·¥Ä", id: ".wikimedia" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " è·¥õs·¥á·¥Ä Ä·¥Ñ ú", id: ".ytsearch" })
                },
                {
                  name: 'quick_reply',
                  buttonParamsJson: JSON.stringify({ display_text: " ü…™s·¥õ", id: ".list" })
                }
              ]
            })
          })
        }
      }
    }, {});
    await Matrix.relayMessage(m.from, msg.message, { messageId: msg.key.id });
  }
};

export default test;
